install.packages("rgeos")
install.packages("rjson")
install.packages("ROCR")
install.packages("SnowballC")
install.packages("tm")
install.packages("topicmodels")
install.packages("XML")
install.packages("zoo")
install.packages("VIM")
setwd("D:/Shaoran/UVA/Fall/sys 6018/sys6018-competition-titanic")
p1.train = read_csv("train.csv")
p1.train = read.csv("train.csv")
p1.predict = read.csv("predict.csv")
p1.test = read.csv("test.csv")
p1.test = read_csv("test.csv")
library(readr)
library(dplyr)
p1.train = read_csv("train.csv")
p1.test = read_csv("test.csv")
p1.lm <- lm(wt ~ disp, data=p1.train)
# STAT 6430
# Day 3 -- R
#
#
# Simple linear regression
#
library(readr)  # Provides "read_csv" function
library(dplyr)  # Allows for nicer display of data frame
# Start by importing data set "brainhead-train.csv" that
# has 200 measurements of head size (cm^3) and brain
# weight (grams).
#
bh.train = read_csv("brainhead-train.csv")
#
# It is always a good idea to graph your data.  There
# are lots of options, but since we only care about
# head size and brain weight, a simple scatter plot will
# do.
plot(bh.train,pch=20,cex=.2) # pch, cex control point type, size
#
# We can fit a line to the data x = HeadSize and
# y = BrainWeight using the lm function:
#
brain.lm <- lm(BrainWeight ~ HeadSize, data=bh.train)
#
# A summary of the values generated by lm:
#
summary(brain.lm)
#
# We can add a plot of the regression line to
# the scatterplot.
#
abline(brain.lm)
#
# The various components in brain.lm:
#
names(brain.lm)
brain.lm$coefficients
brain.lm$residuals
#
# Plotting the residuals can help reveal any model
# departures
#
plot(brain.lm$residuals,pch=20,cex=.2) # Normal?
#
# The MSE is the mean of the squared residuals (errors):
#
mse1 <- mean(brain.lm$residuals^2)
mse1
#
# Note that this is slightly different than the usual
# definition of MSE from ANOVA, where one divides by
# n-2 instead of n.
#
# We can use the MSE to give a measure of how well
# the model predicts values of the y (dependent) variable.
# All other things equal (which they never are),
# the smaller the MSE, the better.
## Polynomials
#
# Sometimes a polynomial better fits data than a line.
# The "poly" function can be used to fit a polynomial
# to data.  Here is a degree 2 polynomial:
brain.lm2 <- lm(BrainWeight ~ poly(HeadSize,2), data=bh.train)
# A summary of the values generated by lm:
summary(brain.lm2)
#
# A comparison of the MSE's for linear and quadratic models:
mse1
mse2 <- mean(brain.lm2$residuals^2)
mse2
# The quadratic term does not appear to add much
# to the model.
# Here's a different data set, related to the price of
# diamonds (c = carats, p = price($)):
#
dia <- read_csv("diamonds.csv")
plot(dia,pch=20,cex=.2)
dia.lm1 <- lm(p ~ c, data=dia)
summary(dia.lm1)
abline(dia.lm1)
mse1 <- mean(dia.lm1$residuals^2)
mse1
# Here is a plot of the residuals against the
# explanatory variable carat
plot(dia$c,dia.lm1$residuals, pch=20,cex=.2)
# Given the shape of the scatter plot, let's
# try a quadratic polynomial.
dia.lm2 <- lm(p ~ poly(c,2), data=dia)
summary(dia.lm2)
mse2 <- mean(dia.lm2$residuals^2)
mse2
mse1
# Brief aside:
# There is a "predict" function in R that will automatically
# take the results from lm together with input variables and
# produce predictions.
cvals <- c(0.4, 0.6, 0.75) # A list of 3 caret values
predict(dia.lm2, newdata = data.frame(c=cvals))
# outputs corresponding y-values
# We can use predict to generate a "plot" for a nonlinear model:
plot(dia,pch=20,cex=.2)
xvals <- seq(from=0.2, to=1.1,by=.01) # A sequence of x-values
yvals <- predict(dia.lm2,newdata=data.frame(c=xvals)) # The y-values
lines(seq(from=0.2, to=1.1,by=.01),yvals,col='red', type='b',cex=.1)
# "lines" creates the red dots
# Would a cubic model work even better?
dia.lm3 <- lm(p ~ poly(c,3), data=dia)
summary(dia.lm3)
mse3 <- mean(dia.lm3$residuals^2)
mse3
mse2  # The quadratic polynomial has nearly the same MSE
## Transformations
#
# Besides polynomials, it is also common to try taking the
# logarithm of either variable to improve the model.  Here's
# a plot of the diamond data, using log(p) in place of p:
plot(log(p)~c, data=dia,pch=20,cex=.2)
dia.lmlog <- lm(log(p)~c, data=dia)
summary(dia.lmlog)
mean(dia.lmlog$residuals^2)  # Not the right residuals!
# Above: log(y) = b0 + b1*x  -> y = exp(b0 + b1*x)
dia.lmlog$coefficients
b0 <- dia.lmlog$coefficients[1]
b1 <- dia.lmlog$coefficients[2]
pred.y <- exp(b0 + b1*dia$c)
mselog <- mean((pred.y - dia$p)^2)
mselog
mse1
mse2
# Plot the log model
plot(dia,pch=20,cex=.2)
xvals <- seq(from=0.2, to=1.1,by=.01) # A sequence of x-values
yvals <- exp(b0 + b1*xvals) # The y-values
lines(seq(from=0.2, to=1.1,by=.01),yvals,col='red', type='b',cex=.1)
#
## Cross-validation
#
# The purpose of cross-validation is to assess the quality of a
# model on data that was not used to create the model, with the
# goal of avoiding model quality being self-fulfilling.  We
# can do this by creating models on a subset of the data, then
# comparing them on the remainder of the data
mys <- read_csv("mystery.csv")
dim(mys)
train.recs <- sample(1:180, size=90) # Select 90 record (row) numbers at random
mys.train <- mys[train.recs,]
mys.valid <- mys[-train.recs,]  # The set to test the models on
plot(mys.train,pch=20,cex=.2)
# Linear model
mys.lm1 <- lm(y ~ x, data=mys.train)
summary(mys.lm1)
abline(mys.lm1)
mse1 <- mean(mys.lm1$residuals^2)
mse1
# Quadratic model
mys.lm2 <- lm(y ~ poly(x,2), data=mys.train)
summary(mys.lm2)
mse2 <- mean(mys.lm2$residuals^2)
mse2
# Cubic model
mys.lm3 <- lm(y ~ poly(x,3), data=mys.train)
summary(mys.lm3)
mse3 <- mean(mys.lm3$residuals^2)
mse3
# Although the MSE for the cubic model is somewhat
# smaller, the x^3 coefficient has a p-value that
# suggests it might not be significant.  Let's test
# the models on the "validation" data.
y1 <- predict(mys.lm1, newdata=mys.valid)
mse1 <- mean((y1-mys.valid$y)^2)
mse1
y2 <- predict(mys.lm2, newdata=mys.valid)
mse2 <- mean((y2-mys.valid$y)^2)
mse2
y3 <- predict(mys.lm3, newdata=mys.valid)
mse3 <- mean((y3-mys.valid$y)^2)
mse3
View(p1.train)
View(p1.train)
View(p1.train)
full <- full %>%
mutate(
Age = ifelse(is.na(Age), mean(full$Age, na.rm=TRUE), Age),
`Age Group` = case_when(Age < 13 ~ "Age1",
Age >= 13 & Age < 18 ~ "Age2",
Age >= 18 & Age < 60 ~ "Age3",
Age >= 60 ~ "Age4"))
Age<-p1.train$Age
full <- full %>%
mutate(
Age = ifelse(is.na(Age), mean(p1.train$Age, na.rm=TRUE), Age),
`Age Group` = case_when(Age < 13 ~ "Age1",
Age >= 13 & Age < 18 ~ "Age2",
Age >= 18 & Age < 60 ~ "Age3",
Age >= 60 ~ "Age4"))
full <- p1.train %>%
mutate(
Age = ifelse(is.na(Age), mean(p1.train$Age, na.rm=TRUE), Age),
`Age Group` = case_when(Age < 13 ~ "Age1",
Age >= 13 & Age < 18 ~ "Age2",
Age >= 18 & Age < 60 ~ "Age3",
Age >= 60 ~ "Age4"))
View(p1.train)
View(full)
full <- p1.train %>%
mutate(
Age = ifelse(is.na(Age), mean(p1.train$Age, na.rm=TRUE), Age),
`AgeGroup` = case_when(Age < 13 ~ "Age1",
Age >= 13 & Age < 18 ~ "Age2",
Age >= 18 & Age < 60 ~ "Age3",
Age >= 60 ~ "Age4"))
Age<-p1.train$Age
full <- p1.train %>%
mutate(
Age = ifelse(is.na(Age), mean(p1.train$Age, na.rm=TRUE), Age),
`AgeGroup` = case_when(Age < 13 ~ "Age1",
Age >= 13 & Age < 18 ~ "Age2",
Age >= 18 & Age < 60 ~ "Age3",
Age >= 60 ~ "Age4"))
full <- p1.train %>%
mutate(
Age = ifelse(is.na(Age), mean(p1.train$Age, na.rm=TRUE), Age),
`AgeGroup` = case_when(Age < 13 ~ 1,
Age >= 13 & Age < 18 ~ 2,
Age >= 18 & Age < 60 ~ 3,
Age >= 60 ~ 4))
View(full)
View(full)
full2 <- full1 %>%
mutate(
`EmbarkedGroup` = case_when( Embarked = 'S' ~ 1,
Embarked = 'C' ~ 2,
Embarked = 'Q' ~ 3))
full1 <- full %>%
mutate(
`GenderGroup` = case_when(Gender=Male ~ 0,
Gender=Female ~ 1))
full2 <- full1 %>%
mutate(
`EmbarkedGroup` = case_when( Embarked = 'S' ~ 1,
Embarked = 'C' ~ 2,
Embarked = 'Q' ~ 3))
full1 <- full %>%
mutate(
`GenderGroup` = case_when(Gender="Male" ~ 0,
Gender="Female" ~ 1))
full2 <- full1 %>%
mutate(
`EmbarkedGroup` = case_when( Embarked = 'S' ~ 1,
Embarked = 'C' ~ 2,
Embarked = 'Q' ~ 3))
full1 <- full %>%
mutate(
`GenderGroup` = case_when(Gender=="Male" ~ 0,
Gender=="Female" ~ 1))
full2 <- full1 %>%
mutate(
`EmbarkedGroup` = case_when( Embarked == 'S' ~ 1,
Embarked == 'C' ~ 2,
Embarked == 'Q' ~ 3))
Age<-p1.train$Age
Gender<-p1.train$Sex
Embarked<-p1.train$Embarked
full1 <- full %>%
mutate(
`GenderGroup` = case_when(Gender=="Male" ~ 0,
Gender=="Female" ~ 1))
full2 <- full1 %>%
mutate(
`EmbarkedGroup` = case_when(Embarked == 'S' ~ 1,
Embarked == 'C' ~ 2,
Embarked == 'Q' ~ 3))
p1.lm <- glm(Survived ~ GenderGroup+EmbarkedGroup+AgeGroup+Pclass+Parch+SybSp, data=full,family="binomial")
p1.lm <- glm(Survived ~ GenderGroup+EmbarkedGroup+AgeGroup+Pclass+Parch+SybSp, data=full2,family="binomial")
p1.lm <- glm(Survived ~ GenderGroup+EmbarkedGroup+AgeGroup+Pclass+Parch+SibSp, data=full2,family="binomial")
p1.lm <- glm(Survived ~ GenderGroup+EmbarkedGroup+Age+Pclass+Parch+SibSp, data=full2,family="binomial")
View(full2)
View(full2)
View(full1)
Gender
full1 <- full %>%
mutate(
`GenderGroup` = case_when(Gender=="male" ~ 0,
Gender=="female" ~ 1))
full2 <- full1 %>%
mutate(
`EmbarkedGroup` = case_when(Embarked == 'S' ~ 1,
Embarked == 'C' ~ 2,
Embarked == 'Q' ~ 3))
p1.lm <- glm(Survived ~ GenderGroup+EmbarkedGroup+Age+Pclass+Parch+SibSp, data=full2,family="binomial")
summary(p1.lm)
p1.lm1 <- glm(Survived ~ GenderGroup+Age+Pclass+SibSp, data=full2,family="binomial")
summary(p1.lm1)
sub <- sample(1:891,size=446)
p1.train <- p1.train[sub,]     # Select subset for cross-validation
p1.test <- p1.train[-sub,]
Age<-p1.train$Age
Gender<-p1.train$Sex
Embarked<-p1.train$Embarked
full <- p1.train %>%
mutate(
Age = ifelse(is.na(Age), mean(p1.train$Age, na.rm=TRUE), Age),
`Age` = case_when(Age < 13 ~ 1,
Age >= 13 & Age < 18 ~ 2,
Age >= 18 & Age < 60 ~ 3,
Age >= 60 ~ 4))
full1 <- full %>%
mutate(
`Sex` = case_when(Gender=="male" ~ 0,
Gender=="female" ~ 1))
full2 <- full1 %>%
mutate(
`Embarked` = case_when(Embarked == 'S' ~ 1,
Embarked == 'C' ~ 2,
Embarked == 'Q' ~ 3))
p1.lm <- glm(Survived ~ Sex+Embarked+Age+Pclass+Parch+SibSp, data=full2,family="binomial")
summary(p1.lm)
p1.lm1 <- glm(Survived ~ Sex+Age+Pclass+SibSp, data=full2,family="binomial")
summary(p1.lm1)
View(full2)
p1.train = read_csv("train.csv")
p1.predict = read_csv("test.csv")
sub <- sample(1:891,size=446)
p1.train <- p1.train[sub,]     # Select subset for cross-validation
p1.test <- p1.train[-sub,]
Age<-p1.train$Age
Gender<-p1.train$Sex
Embarked<-p1.train$Embarked
full <- p1.train %>%
mutate(
Age = ifelse(is.na(Age), mean(p1.train$Age, na.rm=TRUE), Age),
`Age` = case_when(Age < 13 ~ 1,
Age >= 13 & Age < 18 ~ 2,
Age >= 18 & Age < 60 ~ 3,
Age >= 60 ~ 4))
full1 <- full %>%
mutate(
`Sex` = case_when(Gender=="male" ~ 0,
Gender=="female" ~ 1))
full2 <- full1 %>%
mutate(
`Embarked` = case_when(Embarked == 'S' ~ 1,
Embarked == 'C' ~ 2,
Embarked == 'Q' ~ 3))
p1.lm <- glm(Survived ~ Sex+Embarked+Age+Pclass+Parch+SibSp, data=full2,family="binomial")
summary(p1.lm)
p1.lm1 <- glm(Survived ~ Sex+Age+Pclass+SibSp, data=full2,family="binomial")
summary(p1.lm1)
View(p1.test)
sub <- sample(1:891,size=446)
p1.train <- p1.train[sub,]     # Select subset for cross-validation
p1.test <- p1.train[-sub,]
p1.train = read_csv("train.csv")
p1.predict = read_csv("test.csv")
sub <- sample(1:891,size=446)
p1.train <- p1.train[sub,]     # Select subset for cross-validation
p1.test <- p1.train[-sub,]
p1.train1 = read_csv("train.csv")
p1.predict = read_csv("test.csv")
sub <- sample(1:891,size=446)
p1.train <- p1.train1[sub,]     # Select subset for cross-validation
p1.test <- p1.train[-sub,]
sub <- sample(1:891,size=446)
p1.train <- p1.train1[sub,]     # Select subset for cross-validation
p1.test <- p1.train1[-sub,]
Age<-p1.train$Age
Gender<-p1.train$Sex
Embarked<-p1.train$Embarked
full <- p1.train %>%
mutate(
Age = ifelse(is.na(Age), mean(p1.train$Age, na.rm=TRUE), Age),
`Age` = case_when(Age < 13 ~ 1,
Age >= 13 & Age < 18 ~ 2,
Age >= 18 & Age < 60 ~ 3,
Age >= 60 ~ 4))
full1 <- full %>%
mutate(
`Sex` = case_when(Gender=="male" ~ 0,
Gender=="female" ~ 1))
full2 <- full1 %>%
mutate(
`Embarked` = case_when(Embarked == 'S' ~ 1,
Embarked == 'C' ~ 2,
Embarked == 'Q' ~ 3))
p1.lm <- glm(Survived ~ Sex+Embarked+Age+Pclass+Parch+SibSp, data=full2,family="binomial")
summary(p1.lm)
p1.lm1 <- glm(Survived ~ Sex+Age+Pclass+SibSp, data=full2,family="binomial")
summary(p1.lm1)
probs<-as.vector(predict(p1.lm1,newdata=p1.test, type="response"))
preds <- rep(0,446)  # Initialize prediction vector
preds[probs>0.5] <- 1 # p>0.5 -> 1
table(preds,p1.test$Survived)
full3 <- p1.test %>%
mutate(
Age = ifelse(is.na(Age), mean(p1.test$Age, na.rm=TRUE), Age),
`Age` = case_when(Age < 13 ~ 1,
Age >= 13 & Age < 18 ~ 2,
Age >= 18 & Age < 60 ~ 3,
Age >= 60 ~ 4))
full4 <- full3 %>%
mutate(
`Sex` = case_when(Gender=="male" ~ 0,
Gender=="female" ~ 1))
full5 <- full4 %>%
mutate(
`Embarked` = case_when(Embarked == 'S' ~ 1,
Embarked == 'C' ~ 2,
Embarked == 'Q' ~ 3))
Age<-p1.test$Age
Gender<-p1.test$Sex
Embarked<-p1.test$Embarked
full3 <- p1.test %>%
mutate(
Age = ifelse(is.na(Age), mean(p1.test$Age, na.rm=TRUE), Age),
`Age` = case_when(Age < 13 ~ 1,
Age >= 13 & Age < 18 ~ 2,
Age >= 18 & Age < 60 ~ 3,
Age >= 60 ~ 4))
full4 <- full3 %>%
mutate(
`Sex` = case_when(Gender=="male" ~ 0,
Gender=="female" ~ 1))
full5 <- full4 %>%
mutate(
`Embarked` = case_when(Embarked == 'S' ~ 1,
Embarked == 'C' ~ 2,
Embarked == 'Q' ~ 3))
probs<-as.vector(predict(p1.lm1,newdata=p1.test, type="response"))
preds <- rep(0,445)  # Initialize prediction vector
preds[probs>0.5] <- 1
probs<-as.vector(predict(p1.lm1,newdata=full5, type="response"))
preds <- rep(0,445)  # Initialize prediction vector
preds[probs>0.5] <- 1 # p>0.5 -> 1
table(preds,full5$Survived)
preds <- rep(0,445)
preds[probs>0.5] <- 1
preds
probs<-as.vector(predict(p1.lm1,newdata=p1.predict, type="response"))
preds <- rep(0,418)
preds[probs>0.5] <- 1
full6 <- p1.predict %>%
mutate(
Age = ifelse(is.na(Age), mean(p1.test$Age, na.rm=TRUE), Age),
`Age` = case_when(Age < 13 ~ 1,
Age >= 13 & Age < 18 ~ 2,
Age >= 18 & Age < 60 ~ 3,
Age >= 60 ~ 4))
full7 <- full6 %>%
mutate(
`Sex` = case_when(Gender=="male" ~ 0,
Gender=="female" ~ 1))
full8 <- full7 %>%
mutate(
`Embarked` = case_when(Embarked == 'S' ~ 1,
Embarked == 'C' ~ 2,
Embarked == 'Q' ~ 3))
Age<-p1.predict$Age
Gender<-p1.predict$Sex
Embarked<-p1.predict$Embarked
full6 <- p1.predict %>%
mutate(
Age = ifelse(is.na(Age), mean(p1.test$Age, na.rm=TRUE), Age),
`Age` = case_when(Age < 13 ~ 1,
Age >= 13 & Age < 18 ~ 2,
Age >= 18 & Age < 60 ~ 3,
Age >= 60 ~ 4))
full7 <- full6 %>%
mutate(
`Sex` = case_when(Gender=="male" ~ 0,
Gender=="female" ~ 1))
full8 <- full7 %>%
mutate(
`Embarked` = case_when(Embarked == 'S' ~ 1,
Embarked == 'C' ~ 2,
Embarked == 'Q' ~ 3))
probs<-as.vector(predict(p1.lm1,newdata=p1.predict, type="response"))
preds <- rep(0,418)
preds[probs>0.5] <- 1
View(full7)
probs<-as.vector(predict(p1.lm1,newdata=full8, type="response"))
preds <- rep(0,418)
preds[probs>0.5] <- 1
preds
prediction<-cbind.data.frame(full8$PassengerId,preds)
prediction
colnames(prediction) <- c("PassengerId", "Survived")
prediction
write.csv(prediction)
write.table(prediction,file="SL_submission.csv")
write.csv(prediction,file="SL_submission.csv")
write.csv(prediction,file="SL_submission.csv")
